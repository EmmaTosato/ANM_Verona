{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11601721,"sourceType":"datasetVersion","datasetId":7276265},{"sourceId":11602172,"sourceType":"datasetVersion","datasetId":7276616},{"sourceId":11602206,"sourceType":"datasetVersion","datasetId":7276639}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Utils","metadata":{"_uuid":"08321992-8acb-49ac-9f76-ce49558b1ad8","_cell_guid":"0dc9200c-3482-40ff-af90-7efe4c0b35a2","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nimport nibabel as nib\nfrom tqdm import tqdm\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, mean_squared_error, r2_score\nfrom sklearn.metrics import precision_recall_curve, roc_curve, auc\nfrom sklearn.preprocessing import label_binarize\nfrom sklearn.model_selection import StratifiedKFold\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"_uuid":"5fe5b164-3b38-4d65-a30f-2ef11767aa67","_cell_guid":"12403a2b-f9c2-4f5a-b1ee-98055ac775d4","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:05.989826Z","iopub.execute_input":"2025-05-05T14:19:05.990636Z","iopub.status.idle":"2025-05-05T14:19:13.689135Z","shell.execute_reply.started":"2025-05-05T14:19:05.990610Z","shell.execute_reply":"2025-05-05T14:19:13.688344Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Paths\npath_labels = '/kaggle/input/fcmaps-metadata/labels.csv'\npath_fcmaps = '/kaggle/input/fcmaps-processed'                   \npath_fcmaps_augmented = '/kaggle/input/fcmaps-augmented-processed/FCmaps_augmented_processed'\n\n# Load labels\ndf_labels = pd.read_csv(path_labels)\n\n# Temporary:\nto_exclude = ['3_S_5003', '4_S_5003', '4_S_5005', '4_S_5007', '4_S_5008']\ndf_labels = df_labels[~df_labels['ID'].isin(to_exclude)].reset_index(drop=True)","metadata":{"_uuid":"d4b8b1ba-e644-43db-88da-1e774061b952","_cell_guid":"95bcd408-d8b1-417b-b716-b982f8d264bb","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:13.690290Z","iopub.execute_input":"2025-05-05T14:19:13.690686Z","iopub.status.idle":"2025-05-05T14:19:13.713334Z","shell.execute_reply.started":"2025-05-05T14:19:13.690665Z","shell.execute_reply":"2025-05-05T14:19:13.712822Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Parameters\nbatch_size = 16\nepochs = 10\nlr = 1e-3\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ntask = 'classification'               # or 'regression'\nn_folds = 10\n\nif task == 'classification':\n    criterion = nn.CrossEntropyLoss()\n    n_classes = 2  \n    label_column = 'Group'\nelse:\n    criterion = nn.MSELoss()\n    n_classes = 1\n    #label_column = 'Age'","metadata":{"_uuid":"8bbc51cf-82cf-41ec-bcc4-58a4bc1098bf","_cell_guid":"3c330a4c-d2e1-47f8-8b72-b02f7f380c02","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:13.713985Z","iopub.execute_input":"2025-05-05T14:19:13.714190Z","iopub.status.idle":"2025-05-05T14:19:13.803461Z","shell.execute_reply.started":"2025-05-05T14:19:13.714173Z","shell.execute_reply":"2025-05-05T14:19:13.802752Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Dataset","metadata":{"_uuid":"04576f96-432e-4920-b95b-53de896f9592","_cell_guid":"757df327-1471-4b7f-914f-d5b49996d6ee","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"class FCDataset(Dataset):\n    def __init__(self, data_dir, df_labels, label_column, task, transform=None):       \n        self.data_dir = data_dir\n        self.df_labels = df_labels.reset_index(drop=True)\n        self.label_column = label_column\n        self.task = task\n        self.transform = transform\n    \n        # Dictionary for mapping strings to indices if labels are not numbers\n        if not pd.api.types.is_numeric_dtype(self.df_labels[self.label_column]):\n            unique_labels = sorted(self.df_labels[self.label_column].unique())\n            self.label_mapping = {label: i for i, label in enumerate(unique_labels)}\n        else:\n            self.label_mapping = None\n            \n        self.samples = []\n\n        # Loop over each row of the dataframe\n        for _, row in self.df_labels.iterrows():\n            subj_id = row['ID']\n            \n            if self.task == 'classification':\n                # Classification: map the labels\n                label = self.label_mapping[row[self.label_column]]\n            \n            else:  \n                # Regression: convert to float\n                label = float(row[self.label_column])\n\n            # Reconstruct the file paths \n            file_path = os.path.join(data_dir, f\"{subj_id}.processed.npy\")\n            if os.path.exists(file_path):\n                self.samples.append((file_path, label))\n            else:\n                print(f\"Missing file: {file_path}\")\n\n    def __len__(self):\n        return len(self.samples)\n\n    def __getitem__(self, idx):\n        file_path, label = self.samples[idx]\n        \n        # Load and reshape the volume: (1, 91, 109, 91)\n        volume = np.load(file_path)\n        volume = np.expand_dims(volume, axis=0)  \n\n        # Covert volume into a tensor\n        x = torch.tensor(volume, dtype=torch.float32)\n\n        # Convert the label into a tensor\n        if self.task == 'classification':\n            y = torch.tensor(label, dtype=torch.long)\n        else: \n            y = torch.tensor(label, dtype=torch.float32)\n\n        if self.transform:\n            x = self.transform(x)\n\n        return x, y","metadata":{"_uuid":"6c596cdc-d001-4729-8b76-bf0bf9dd7ddd","_cell_guid":"c16fa8f8-af11-44f7-a4f8-6b8c18d13938","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:13.805193Z","iopub.execute_input":"2025-05-05T14:19:13.805379Z","iopub.status.idle":"2025-05-05T14:19:13.819222Z","shell.execute_reply.started":"2025-05-05T14:19:13.805365Z","shell.execute_reply":"2025-05-05T14:19:13.818622Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class AugmentedFCDataset(Dataset):\n    def __init__(self, data_dir, df_labels, label_column, task, transform=None):\n        \n        self.data_dir = data_dir\n        self.df_labels = df_labels.reset_index(drop=True)\n        self.label_column = label_column\n        self.task = task\n        self.transform = transform\n\n        # Mapping\n        if not pd.api.types.is_numeric_dtype(self.df_labels[self.label_column]):\n            unique_labels = sorted(self.df_labels[self.label_column].unique())\n            self.label_mapping = {label: i for i, label in enumerate(unique_labels)}\n        else:\n            self.label_mapping = None\n            \n        self.samples = []\n\n        for _, row in self.df_labels.iterrows():\n            subj_id = row['ID']\n\n            if self.task == 'classification':\n                label = self.label_mapping[row[self.label_column]]\n            else:\n                label = float(row[self.label_column])\n\n            # Loop over each subject folder and list each augmentation\n            subject_folder = os.path.join(data_dir, subj_id)\n            if os.path.isdir(subject_folder):\n                for file in os.listdir(subject_folder):\n                    if file.endswith('.npy'):\n                        file_path = os.path.join(subject_folder, file)\n                        self.samples.append((file_path, label))\n            else:\n                print(f\"Warning: missing augmented folder for subject {subj_id}\")\n\n    def __len__(self):\n        return len(self.samples)\n\n    def __getitem__(self, idx):\n        file_path, label = self.samples[idx]\n\n        # Load and reshape the volume: (1, 91, 109, 91)\n        volume = np.load(file_path)\n        volume = np.expand_dims(volume, axis=0)\n\n        x = torch.tensor(volume, dtype=torch.float32)\n\n        if self.task == 'classification':\n            y = torch.tensor(label, dtype=torch.long)\n        else:\n            y = torch.tensor(label, dtype=torch.float32)\n\n        if self.transform:\n            x = self.transform(x)\n\n        return x, y","metadata":{"_uuid":"ba3bc74d-f35e-4140-acb9-c53ec5da4170","_cell_guid":"100702f9-e13d-4b5d-9889-471adad7d19b","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:13.819847Z","iopub.execute_input":"2025-05-05T14:19:13.820050Z","iopub.status.idle":"2025-05-05T14:19:13.839126Z","shell.execute_reply.started":"2025-05-05T14:19:13.820035Z","shell.execute_reply":"2025-05-05T14:19:13.838577Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# CNN Models","metadata":{"_uuid":"bbc37a01-7c4c-4e11-bc36-2748fd22d4b7","_cell_guid":"1bd9c9fa-d237-49d8-8454-4e79c6240c6d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"## Network","metadata":{"_uuid":"0983aaeb-ca17-4319-9c53-19ad3e84857f","_cell_guid":"4719c403-77b3-4920-b165-76d78357546d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"from torchvision.models.video import r3d_18\n\nclass SimpleCNN3D(nn.Module):\n    def __init__(self, n_classes):\n        super(SimpleCNN3D, self).__init__()\n        self.conv1 = nn.Conv3d(1, 16, kernel_size=3, padding=1)\n        self.bn1 = nn.BatchNorm3d(16)\n        self.pool1 = nn.MaxPool3d(2)\n\n        self.conv2 = nn.Conv3d(16, 32, kernel_size=3, padding=1)\n        self.bn2 = nn.BatchNorm3d(32)\n        self.pool2 = nn.MaxPool3d(2)\n\n        self.conv3 = nn.Conv3d(32, 64, kernel_size=3, padding=1)\n        self.bn3 = nn.BatchNorm3d(64)\n        self.pool3 = nn.AdaptiveAvgPool3d(1)\n\n        self.dropout = nn.Dropout(p=0.4)\n        self.fc = nn.Linear(64, n_classes)\n\n    def forward(self, x):\n        x = self.pool1(torch.relu(self.bn1(self.conv1(x))))\n        x = self.pool2(torch.relu(self.bn2(self.conv2(x))))\n        x = self.pool3(torch.relu(self.bn3(self.conv3(x))))\n        x = x.view(x.size(0), -1)\n        x = self.dropout(x)\n        return self.fc(x)\n\n\nclass ResNet3D(nn.Module):\n    def __init__(self, n_classes):\n        super(ResNet3D, self).__init__()\n        self.model = r3d_18(weights=None)\n        self.model.stem[0] = nn.Conv3d(1, 64, kernel_size=(3,7,7), stride=(1,2,2), padding=(1,3,3), bias=False)\n        self.model.fc = nn.Linear(self.model.fc.in_features, n_classes)\n\n    def forward(self, x):\n        return self.model(x)","metadata":{"_uuid":"40063ec0-dc87-48ab-9bf1-40d055cdc428","_cell_guid":"6a32de33-c308-47cb-a6ac-017d808f1d45","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:13.839923Z","iopub.execute_input":"2025-05-05T14:19:13.840172Z","iopub.status.idle":"2025-05-05T14:19:18.426443Z","shell.execute_reply.started":"2025-05-05T14:19:13.840149Z","shell.execute_reply":"2025-05-05T14:19:18.425901Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Training, Validation and Testing loops","metadata":{"_uuid":"0cf4894c-d53d-4571-9052-1a566dfb0a40","_cell_guid":"af895431-da57-43f4-b56d-bcb82d23266e","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"Training function","metadata":{}},{"cell_type":"code","source":"def train(train_loader, model, criterion, optimizer, device):\n    # Enable training mode \n    model.train()\n    running_loss = 0.0\n\n    for x_batch, y_batch in train_loader:\n        x_batch, y_batch = x_batch.to(device), y_batch.to(device)\n\n        # Reset gradients\n        optimizer.zero_grad()\n        \n        # Forward pass\n        outputs = model(x_batch)\n\n        # Compute loss\n        loss = criterion(outputs, y_batch)\n\n        # Backpropagation\n        loss.backward()\n\n        # Update weights\n        optimizer.step()\n\n        running_loss += loss.item() * x_batch.size(0)\n\n    train_loss = running_loss / len(train_loader.dataset)\n    return train_loss","metadata":{"_uuid":"c48c6421-5d11-4bad-bafb-8c920bf7d669","_cell_guid":"b39cc62b-6f61-4f22-9821-f1d043d0c77d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-05-05T14:19:18.427098Z","iopub.execute_input":"2025-05-05T14:19:18.427437Z","iopub.status.idle":"2025-05-05T14:19:18.432628Z","shell.execute_reply.started":"2025-05-05T14:19:18.427411Z","shell.execute_reply":"2025-05-05T14:19:18.431754Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Validation function","metadata":{}},{"cell_type":"code","source":"def validate(val_loader, model, criterion, device, task):\n    # Set model to evaluation mode\n    model.eval()\n    running_loss = 0.0\n    correct = 0\n\n    # Disable gradient computation\n    with torch.no_grad():\n        for x_val, y_val in val_loader:\n            x_val, y_val = x_val.to(device), y_val.to(device)\n            outputs = model(x_val)\n            loss = criterion(outputs, y_val)\n            running_loss += loss.item() * x_val.size(0)\n            \n            _, predicted = torch.max(outputs, 1)\n            correct += (predicted == y_val).sum().item()\n\n    val_loss = running_loss / len(val_loader.dataset)\n    val_accuracy = correct / len(val_loader.dataset)\n    return val_loss, val_accuracy","metadata":{"_uuid":"60459c7f-6418-4a8f-95b0-8f16110535cb","_cell_guid":"63dcc98a-9d0c-4801-b716-47fbebd7d5cf","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:18.433461Z","iopub.execute_input":"2025-05-05T14:19:18.434023Z","iopub.status.idle":"2025-05-05T14:19:18.475052Z","shell.execute_reply.started":"2025-05-05T14:19:18.433998Z","shell.execute_reply":"2025-05-05T14:19:18.474318Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Evaluation function (to get predictions)","metadata":{}},{"cell_type":"code","source":"def evaluate(model, loader, task, device):\n    model.eval()\n    true_labels, pred_labels = [], []\n\n    with torch.no_grad():\n        for x, y in loader:\n            x, y = x.to(device), y.to(device)\n            outputs = model(x)\n\n            # Convert output to prediction\n            if task == 'classification':\n                preds = torch.argmax(outputs, dim=1)  \n            else:\n                preds = outputs.squeeze()  \n\n            # Store true and predicted values\n            true_labels.extend(y.cpu().numpy())\n            pred_labels.extend(preds.cpu().numpy())\n\n    return np.array(true_labels), np.array(pred_labels)","metadata":{"_uuid":"fd8d03ee-55ba-4d36-be01-f5184a7fc69f","_cell_guid":"5e26f0d9-41ac-40ca-a490-0b0cda53f58a","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-05-05T14:19:18.475807Z","iopub.execute_input":"2025-05-05T14:19:18.476091Z","iopub.status.idle":"2025-05-05T14:19:18.489116Z","shell.execute_reply.started":"2025-05-05T14:19:18.476072Z","shell.execute_reply":"2025-05-05T14:19:18.488511Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Data","metadata":{"_uuid":"ff174829-9963-4626-bb6a-434a1ceae3b5","_cell_guid":"3241348f-6cb0-41e9-882f-06cecda801cf","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"Load some files for example","metadata":{"_uuid":"655f2d4d-00b1-4dcd-9b58-972f890ffb9f","_cell_guid":"8b02b407-28f0-4cb0-a47e-34d7ff2b5295","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"img3D = np.load('/kaggle/input/fcmaps-processed/002_S_4654.processed.npy')\n\nprint(img3D.shape)\nprint(img3D.dtype)","metadata":{"_uuid":"4a7c7134-8a2a-4acd-8374-25810b5a558e","_cell_guid":"43b418e6-2c7d-4bad-915d-c6030d1c130e","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:18.490937Z","iopub.execute_input":"2025-05-05T14:19:18.491131Z","iopub.status.idle":"2025-05-05T14:19:18.517125Z","shell.execute_reply.started":"2025-05-05T14:19:18.491111Z","shell.execute_reply":"2025-05-05T14:19:18.516582Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Pairwise classification","metadata":{"_uuid":"523d9291-5e26-40f7-acd2-24cf141800b1","_cell_guid":"674ebd63-ce1b-450c-9131-9892ac08b634","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"- ADNI + CBS = 116 \n- CBS + PSP = 105 \n- ADNI + PSP = 133","metadata":{"_uuid":"fac3cbaa-9e89-4b5a-907a-8bf51243f86e","_cell_guid":"cc30bc2c-02ee-41ac-81fd-fa835044bb1b","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"group1 = 'ADNI'\ngroup2 = 'PSP'\n\ndf_pair = df_labels[df_labels['Group'].isin([group1, group2])].reset_index(drop=True)","metadata":{"_uuid":"8cbe464f-6472-475d-9e76-7fca48b7da10","_cell_guid":"63d50781-a04e-49de-bf3a-b7c310f3460b","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:18.517695Z","iopub.execute_input":"2025-05-05T14:19:18.517906Z","iopub.status.idle":"2025-05-05T14:19:18.522370Z","shell.execute_reply.started":"2025-05-05T14:19:18.517891Z","shell.execute_reply":"2025-05-05T14:19:18.521812Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_pair.shape","metadata":{"_uuid":"c566f84b-5c6e-44d7-9089-0b0e0b3185e8","_cell_guid":"fbcfde95-1394-42e6-94ba-ee474521c3b5","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:19:18.523011Z","iopub.execute_input":"2025-05-05T14:19:18.523256Z","iopub.status.idle":"2025-05-05T14:19:18.536659Z","shell.execute_reply.started":"2025-05-05T14:19:18.523235Z","shell.execute_reply":"2025-05-05T14:19:18.536089Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Splitting","metadata":{"_uuid":"a0033120-1d58-4602-a85c-2129ab2bc762","_cell_guid":"023fe908-59d4-40df-ba22-a87a5ade6acc","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Splitting of the dataset in training and testing\ntrain_df, df_test = train_test_split(\n    df_pair,\n    test_size=0.2,\n    stratify=df_pair['Group'],\n    random_state=42\n)\n\n# Splitting of training in training and validation \ndf_train, df_val = train_test_split(\n    train_df,\n    test_size=0.2,\n    stratify=train_df[label_column],\n    random_state=42\n)","metadata":{"_uuid":"05b0448a-d101-4234-8b5e-7325a9bede61","_cell_guid":"9176a0f7-9e7c-4bd5-ac94-862402b44018","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-05-05T14:27:38.209947Z","iopub.execute_input":"2025-05-05T14:27:38.210231Z","iopub.status.idle":"2025-05-05T14:27:38.218805Z","shell.execute_reply.started":"2025-05-05T14:27:38.210212Z","shell.execute_reply":"2025-05-05T14:27:38.218127Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Check the balance between groups","metadata":{"_uuid":"4ff176c6-8214-4461-81d9-f3c7862e838d","_cell_guid":"f0f84aa2-fac7-47be-b4df-c30a9526c949","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"print(df_train['Group'].value_counts())\nprint(df_val['Group'].value_counts())\nprint(df_test['Group'].value_counts())","metadata":{"_uuid":"dbad722c-30c4-431d-8be7-245013513d6f","_cell_guid":"eb0c4f8b-6b52-4be1-891b-88cbb2e83a2b","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T14:28:04.709560Z","iopub.execute_input":"2025-05-05T14:28:04.709857Z","iopub.status.idle":"2025-05-05T14:28:04.716593Z","shell.execute_reply.started":"2025-05-05T14:28:04.709835Z","shell.execute_reply":"2025-05-05T14:28:04.715947Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Example of augmentation","metadata":{"_uuid":"c6f9fccc-f7a4-45a5-9656-dd1c1c8e7674","_cell_guid":"336964a1-aa14-41d5-8786-caf48134e884","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"train_dataset = AugmentedFCDataset(path_fcmaps_augmented, train_df, label_column, task)","metadata":{"_uuid":"3bcaae5d-911d-4089-98cb-cf4372c517bc","_cell_guid":"2ffb1827-d910-4e13-925c-86819ca6846c","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T09:24:50.436223Z","iopub.execute_input":"2025-05-05T09:24:50.436405Z","iopub.status.idle":"2025-05-05T09:24:51.118034Z","shell.execute_reply.started":"2025-05-05T09:24:50.436391Z","shell.execute_reply":"2025-05-05T09:24:51.117503Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Shape before augmentation: \", train_df.shape )\nprint(\"Shape after augmentation: \", len(train_dataset) )","metadata":{"_uuid":"60daa1b2-6688-473e-9202-e8257bcad817","_cell_guid":"e71d43ec-74d8-4a32-857d-555509a590cd","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-05-05T08:13:51.808348Z","iopub.execute_input":"2025-05-05T08:13:51.809037Z","iopub.status.idle":"2025-05-05T08:13:51.812879Z","shell.execute_reply.started":"2025-05-05T08:13:51.809014Z","shell.execute_reply":"2025-05-05T08:13:51.812219Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Training","metadata":{"_uuid":"6891e92e-42bc-4659-8074-f21d3e55b795","_cell_guid":"e2d815a8-c067-4c69-ac16-f12435930d5b","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Create Datasets\ntrain_dataset = AugmentedFCDataset(path_fcmaps_augmented, df_train, label_column, task)\nval_dataset = FCDataset(path_fcmaps, df_val, label_column, task)\n\n# Create DataLoaders\ntrain_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\nval_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n\n# MODEL: ResNet3D\nmodel = ResNet3D(n_classes=2).to(device)\noptimizer = optim.Adam(model.parameters(), lr=lr)\n\n# Paramters\ntrain_losses = []\nval_losses = []\nval_accuracies = []\n\nbest_accuracy = -float('inf')\nbest_epoch = -1\nbest_model_path = None\n\n# Training \nfor epoch in range(epochs):\n    train_loss = train(train_loader, model, criterion, optimizer, device)\n    val_loss, val_accuracy = validate(val_loader, model, criterion, device, task)\n\n    print(f\"Epoch {epoch+1}/{epochs} | Train Loss: {train_loss:.4f} | Val Loss: {val_loss:.4f} | Val Accuracy: {val_accuracy:.4f}\")\n\n    train_losses.append(train_loss)\n    val_losses.append(val_loss)\n    val_accuracies.append(val_accuracy)\n\n    # Save best model with epoch number in the filename\n    if val_accuracy > best_accuracy:\n        best_accuracy = val_accuracy\n        best_epoch = epoch + 1  \n        best_model_path = f'best_model_epoch{best_epoch}.pt'\n        torch.save(model.state_dict(), best_model_path)","metadata":{"_uuid":"bac1f448-3531-4a1d-95f2-b8c251ac3de2","_cell_guid":"8638b365-5cdd-4d0d-b2dc-db8e6d10e0aa","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def plot_losses_and_accuracy(train_losses, val_losses, val_accuracies):\n    plt.figure(figsize=(8, 5))\n    plt.plot(train_losses, label='Train Loss', marker='o')\n    plt.plot(val_losses, label='Validation Loss', marker='s')\n    plt.plot(val_accuracies, label='Validation Accuracy', marker='^')\n    plt.xlabel('Epoch')\n    plt.ylabel('Value')\n    plt.title('Training Loss, Validation Loss and Validation Accuracy')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\ndef plot_losses_only(train_losses, val_losses):\n    plt.figure(figsize=(8, 5))\n    plt.plot(train_losses, label='Train Loss', marker='o')\n    plt.plot(val_losses, label='Validation Loss', marker='s')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Training and Validation Loss')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n# --- PLOT ---\nplot_losses_and_accuracy(train_losses, val_losses, val_accuracies)\nplot_losses_only(train_losses, val_losses)","metadata":{"_uuid":"3c9707dc-60b8-4c31-a416-927fa8be3477","_cell_guid":"69522e7a-41f1-40f9-86a7-237370cf63fb","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Evaluation","metadata":{"_uuid":"0c9179c3-722a-4851-be2b-1bcd7c25c0fd","_cell_guid":"81191a98-5ca9-4b75-be3a-1d08338d78e5","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"print(f\"\\nBest validation accuracy: {best_accuracy:.4f} at epoch {best_epoch}\")\nprint(f\"Best model saved at: {best_model_path}\")","metadata":{"_uuid":"a21a71b5-da73-473b-bfe1-1a7f0ef328d6","_cell_guid":"f9da0b4d-a7f6-43cb-9410-f6696589fcbb","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Dataset and DataLoaders \ntest_dataset = FCDataset(path_fcmaps, df_test, label_column, task)\ntest_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n\n# Load the model\nmodel = ResNet3D(n_classes=n_classes).to(device)\nmodel.load_state_dict(torch.load(best_model_path))\nmodel.eval()\n\n# Test\ny_true, y_pred = evaluate(model, test_loader, task, device)","metadata":{"_uuid":"bd67ddc9-9804-4819-8f86-8568099abb2f","_cell_guid":"4741b28c-9862-420b-8d43-df46111ff1da","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-29T16:32:44.924696Z","iopub.execute_input":"2025-04-29T16:32:44.924991Z","iopub.status.idle":"2025-04-29T16:32:45.155937Z","shell.execute_reply.started":"2025-04-29T16:32:44.924971Z","shell.execute_reply":"2025-04-29T16:32:45.155343Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Classification","metadata":{"_uuid":"f46a08f2-e96c-4deb-aef7-e5221654df32","_cell_guid":"208a4169-4b98-462e-be46-9a1ce7a8c9b5","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Metrics\nreport = classification_report(\n    y_true, y_pred,\n    output_dict=True,\n    zero_division=0  \n)\n\ndf_report = pd.DataFrame(report).transpose()","metadata":{"_uuid":"5deb4aa3-552f-4ce2-97f4-593afa6170d8","_cell_guid":"99862f4c-9524-438d-943b-94c54caa18ef","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:32:47.086239Z","iopub.execute_input":"2025-04-29T16:32:47.086490Z","iopub.status.idle":"2025-04-29T16:32:47.097496Z","shell.execute_reply.started":"2025-04-29T16:32:47.086471Z","shell.execute_reply":"2025-04-29T16:32:47.096868Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_report.round(3)","metadata":{"_uuid":"04d082f0-1234-405a-bc5d-6c7d34394d04","_cell_guid":"67c5b792-c8bd-44a8-9bde-1d793bab1505","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:32:58.564436Z","iopub.execute_input":"2025-04-29T16:32:58.565092Z","iopub.status.idle":"2025-04-29T16:32:58.573360Z","shell.execute_reply.started":"2025-04-29T16:32:58.565069Z","shell.execute_reply":"2025-04-29T16:32:58.572681Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Confusion matrix\nconf_matrix = confusion_matrix(y_true, y_pred)\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\nplt.title(\"Test Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"True\")\nplt.show()","metadata":{"_uuid":"7f7343e7-8050-4e58-8cab-9c5967991b67","_cell_guid":"ff58b369-2c6f-423f-b182-d78804848e3e","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-29T16:30:51.943516Z","iopub.execute_input":"2025-04-29T16:30:51.943775Z","iopub.status.idle":"2025-04-29T16:30:52.154743Z","shell.execute_reply.started":"2025-04-29T16:30:51.943754Z","shell.execute_reply":"2025-04-29T16:30:52.154104Z"}},"outputs":[],"execution_count":null}]}