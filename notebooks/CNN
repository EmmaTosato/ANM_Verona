{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11601721,"sourceType":"datasetVersion","datasetId":7276265},{"sourceId":11602172,"sourceType":"datasetVersion","datasetId":7276616},{"sourceId":11602206,"sourceType":"datasetVersion","datasetId":7276639}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Utils","metadata":{"_uuid":"b14901a5-093a-4928-8c3e-060055614bc6","_cell_guid":"0608ed22-fe71-430f-a280-4a796f3efaee","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nimport nibabel as nib\nfrom tqdm import tqdm\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, mean_squared_error, r2_score\nfrom sklearn.metrics import precision_recall_curve, roc_curve, auc\nfrom sklearn.preprocessing import label_binarize\nfrom sklearn.model_selection import StratifiedKFold\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"_uuid":"44e21ed4-cc2f-4ba7-809a-4e6beb208c53","_cell_guid":"ebe7adff-2d75-4a28-96c1-c8446926b4a6","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:04:40.401960Z","iopub.execute_input":"2025-04-29T16:04:40.402742Z","iopub.status.idle":"2025-04-29T16:04:40.408723Z","shell.execute_reply.started":"2025-04-29T16:04:40.402708Z","shell.execute_reply":"2025-04-29T16:04:40.407911Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# Paths\npath_labels = '/kaggle/input/fcmaps-metadata/labels.csv'\npath_fcmaps = '/kaggle/input/fcmaps-processed'                   \npath_fcmaps_augmented = '/kaggle/input/fcmaps-augmented-processed/FCmaps_augmented_processed'\n\n# Load labels\ndf_labels = pd.read_csv(path_labels)\n\n# Temporary:\nto_exclude = ['3_S_5003', '4_S_5003', '4_S_5005', '4_S_5007', '4_S_5008']\ndf_labels = df_labels[~df_labels['ID'].isin(to_exclude)].reset_index(drop=True)","metadata":{"_uuid":"7cf922c3-3614-487d-8e2c-31f25482bc34","_cell_guid":"a64dcd3e-993b-4cf9-825c-53b2c6cb97d6","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:04:41.914328Z","iopub.execute_input":"2025-04-29T16:04:41.914841Z","iopub.status.idle":"2025-04-29T16:04:41.932502Z","shell.execute_reply.started":"2025-04-29T16:04:41.914818Z","shell.execute_reply":"2025-04-29T16:04:41.931924Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"# Parameters\nbatch_size = 4\nepochs = 10\nlr = 1e-3\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ntask = 'classification'               # or 'regression'\n\nif task == 'classification':\n    criterion = nn.CrossEntropyLoss()\n    n_classes = 2  \n    label_column = 'Group'\nelse:\n    criterion = nn.MSELoss()\n    n_classes = 1\n    #label_column = 'Age'","metadata":{"_uuid":"b410fa59-6e71-42a6-a572-bc714173604f","_cell_guid":"a509b856-b6e3-4bc2-8fb8-a2014f973c87","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:04:42.106348Z","iopub.execute_input":"2025-04-29T16:04:42.106918Z","iopub.status.idle":"2025-04-29T16:04:42.111316Z","shell.execute_reply.started":"2025-04-29T16:04:42.106867Z","shell.execute_reply":"2025-04-29T16:04:42.110495Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":31},{"cell_type":"markdown","source":"# Dataset","metadata":{"_uuid":"1ce91639-1128-40f3-9ceb-a68b1d4f65dd","_cell_guid":"9a36049b-9d59-4cbc-9a96-8ddd9602334e","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"class FCDataset(Dataset):\n    def __init__(self, data_dir, df_labels, label_column, task, transform=None):       \n        self.data_dir = data_dir\n        self.df_labels = df_labels.reset_index(drop=True)\n        self.label_column = label_column\n        self.task = task\n        self.transform = transform\n    \n        # Dictionary for mapping strings to indices if labels are not numbers\n        if not pd.api.types.is_numeric_dtype(self.df_labels[self.label_column]):\n            unique_labels = sorted(self.df_labels[self.label_column].unique())\n            self.label_mapping = {label: i for i, label in enumerate(unique_labels)}\n        else:\n            self.label_mapping = None\n            \n        self.samples = []\n\n        # Loop over each row of the dataframe\n        for _, row in self.df_labels.iterrows():\n            subj_id = row['ID']\n            \n            if self.task == 'classification':\n                # Classification: map the labels\n                label = self.label_mapping[row[self.label_column]]\n            \n            else:  \n                # Regression: convert to float\n                label = float(row[self.label_column])\n\n            # Reconstruct the file paths \n            file_path = os.path.join(data_dir, f\"{subj_id}.processed.npy\")\n            if os.path.exists(file_path):\n                self.samples.append((file_path, label))\n            else:\n                print(f\"Missing file: {file_path}\")\n\n    def __len__(self):\n        return len(self.samples)\n\n    def __getitem__(self, idx):\n        file_path, label = self.samples[idx]\n        \n        # Load and reshape the volume: (1, 91, 109, 91)\n        volume = np.load(file_path)\n        volume = np.expand_dims(volume, axis=0)  \n\n        # Covert volume into a tensor\n        x = torch.tensor(volume, dtype=torch.float32)\n\n        # Convert the label into a tensor\n        if self.task == 'classification':\n            y = torch.tensor(label, dtype=torch.long)\n        else: \n            y = torch.tensor(label, dtype=torch.float32)\n\n        if self.transform:\n            x = self.transform(x)\n\n        return x, y","metadata":{"_uuid":"59093f62-f7a3-498b-996b-48f626375d43","_cell_guid":"ac99af15-0cf1-4ad3-8be8-cbc54e5e04a1","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:04:42.639485Z","iopub.execute_input":"2025-04-29T16:04:42.639744Z","iopub.status.idle":"2025-04-29T16:04:42.647595Z","shell.execute_reply.started":"2025-04-29T16:04:42.639723Z","shell.execute_reply":"2025-04-29T16:04:42.646740Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"class AugmentedFCDataset(Dataset):\n    def __init__(self, data_dir, df_labels, label_column, task, transform=None):\n        \n        self.data_dir = data_dir\n        self.df_labels = df_labels.reset_index(drop=True)\n        self.label_column = label_column\n        self.task = task\n        self.transform = transform\n\n        # Mapping\n        if not pd.api.types.is_numeric_dtype(self.df_labels[self.label_column]):\n            unique_labels = sorted(self.df_labels[self.label_column].unique())\n            self.label_mapping = {label: i for i, label in enumerate(unique_labels)}\n        else:\n            self.label_mapping = None\n            \n        self.samples = []\n\n        for _, row in self.df_labels.iterrows():\n            subj_id = row['ID']\n\n            if self.task == 'classification':\n                label = self.label_mapping[row[self.label_column]]\n            else:\n                label = float(row[self.label_column])\n\n            # Loop over each subject folder and list each augmentation\n            subject_folder = os.path.join(data_dir, subj_id)\n            if os.path.isdir(subject_folder):\n                for file in os.listdir(subject_folder):\n                    if file.endswith('.npy'):\n                        file_path = os.path.join(subject_folder, file)\n                        self.samples.append((file_path, label))\n            else:\n                print(f\"Warning: missing augmented folder for subject {subj_id}\")\n\n    def __len__(self):\n        return len(self.samples)\n\n    def __getitem__(self, idx):\n        file_path, label = self.samples[idx]\n\n        # Load and reshape the volume: (1, 91, 109, 91)\n        volume = np.load(file_path)\n        volume = np.expand_dims(volume, axis=0)\n\n        x = torch.tensor(volume, dtype=torch.float32)\n\n        if self.task == 'classification':\n            y = torch.tensor(label, dtype=torch.long)\n        else:\n            y = torch.tensor(label, dtype=torch.float32)\n\n        if self.transform:\n            x = self.transform(x)\n\n        return x, y","metadata":{"_uuid":"09f8057b-a9c1-461e-8d83-7dd3efb12dde","_cell_guid":"eed28c5f-aebd-48a7-a1bd-4357f99aaae4","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:04:42.842320Z","iopub.execute_input":"2025-04-29T16:04:42.842526Z","iopub.status.idle":"2025-04-29T16:04:42.850321Z","shell.execute_reply.started":"2025-04-29T16:04:42.842512Z","shell.execute_reply":"2025-04-29T16:04:42.849580Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":33},{"cell_type":"markdown","source":"# CNN Models","metadata":{"_uuid":"772e3793-cdaf-4ace-a460-d340875f789c","_cell_guid":"5c79a7d3-1073-4e18-adab-c022c95a011b","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"## Network","metadata":{"_uuid":"de874820-3538-4bc3-962f-55f8563d4e2a","_cell_guid":"acc416b2-4d1c-46df-862b-80aab873d974","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"from torchvision.models.video import r3d_18\n\nclass SimpleCNN3D(nn.Module):\n    def __init__(self, n_classes):\n        super(SimpleCNN3D, self).__init__()\n        self.conv1 = nn.Conv3d(1, 16, kernel_size=3, padding=1)\n        self.bn1 = nn.BatchNorm3d(16)\n        self.pool1 = nn.MaxPool3d(2)\n\n        self.conv2 = nn.Conv3d(16, 32, kernel_size=3, padding=1)\n        self.bn2 = nn.BatchNorm3d(32)\n        self.pool2 = nn.MaxPool3d(2)\n\n        self.conv3 = nn.Conv3d(32, 64, kernel_size=3, padding=1)\n        self.bn3 = nn.BatchNorm3d(64)\n        self.pool3 = nn.AdaptiveAvgPool3d(1)\n\n        self.dropout = nn.Dropout(p=0.4)\n        self.fc = nn.Linear(64, n_classes)\n\n    def forward(self, x):\n        x = self.pool1(torch.relu(self.bn1(self.conv1(x))))\n        x = self.pool2(torch.relu(self.bn2(self.conv2(x))))\n        x = self.pool3(torch.relu(self.bn3(self.conv3(x))))\n        x = x.view(x.size(0), -1)\n        x = self.dropout(x)\n        return self.fc(x)\n\n\nclass ResNet3D(nn.Module):\n    def __init__(self, n_classes):\n        super(ResNet3D, self).__init__()\n        self.model = r3d_18(pretrained=False)\n        self.model.stem[0] = nn.Conv3d(1, 64, kernel_size=(3,7,7), stride=(1,2,2), padding=(1,3,3), bias=False)\n        self.model.fc = nn.Linear(self.model.fc.in_features, n_classes)\n\n    def forward(self, x):\n        return self.model(x)","metadata":{"_uuid":"423c1663-bc0e-4599-a1d3-2250e7c001ed","_cell_guid":"61f5685f-8690-4e48-8a19-a3f9856e6ced","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:04:43.435237Z","iopub.execute_input":"2025-04-29T16:04:43.435473Z","iopub.status.idle":"2025-04-29T16:04:43.443178Z","shell.execute_reply.started":"2025-04-29T16:04:43.435458Z","shell.execute_reply":"2025-04-29T16:04:43.442470Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":34},{"cell_type":"markdown","source":"## Training, Validation and Testing loops","metadata":{"_uuid":"9e971f2b-ed92-4148-9eb5-3056532f4f86","_cell_guid":"c639958d-da90-42a0-b196-195edc7827bd","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"def train(train_loader, model, criterion, optimizer, device):\n    # Enable training mode (dropout, batchnorm updates)\n    model.train()\n    running_loss = 0.0\n\n    for x_batch, y_batch in train_loader:\n        x_batch, y_batch = x_batch.to(device), y_batch.to(device)\n\n        # Reset gradients\n        optimizer.zero_grad()\n        \n        # Forward pass\n        outputs = model(x_batch)\n\n        # Compute loss\n        loss = criterion(outputs, y_batch)\n\n        # Backpropagation\n        loss.backward()\n\n        # Update weights\n        optimizer.step()\n\n        running_loss += loss.item() * x_batch.size(0)\n\n    train_loss = running_loss / len(train_loader.dataset)\n    return train_loss","metadata":{"_uuid":"66c664b7-0f0e-4628-a08b-04b4152db311","_cell_guid":"ce4684a0-8a20-4ec6-aaa8-ea35d512ed54","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-29T16:11:25.016289Z","iopub.execute_input":"2025-04-29T16:11:25.016579Z","iopub.status.idle":"2025-04-29T16:11:25.021318Z","shell.execute_reply.started":"2025-04-29T16:11:25.016557Z","shell.execute_reply":"2025-04-29T16:11:25.020767Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"def validate(val_loader, model, criterion, device, task):\n    model.eval()\n    running_loss = 0.0\n    correct = 0\n\n    with torch.no_grad():\n        for x_val, y_val in val_loader:\n            x_val, y_val = x_val.to(device), y_val.to(device)\n            outputs = model(x_val)\n            loss = criterion(outputs, y_val)\n            running_loss += loss.item() * x_val.size(0)\n            \n            _, predicted = torch.max(outputs, 1)\n            correct += (predicted == y_val).sum().item()\n\n    val_loss = running_loss / len(val_loader.dataset)\n    val_accuracy = correct / len(val_loader.dataset)\n    return val_loss, val_accuracy","metadata":{"_uuid":"46038cfe-4da9-45a1-bb0b-cfd2559fa63f","_cell_guid":"490edfbf-52f9-488b-8f25-5d89d07caf32","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:11:25.334532Z","iopub.execute_input":"2025-04-29T16:11:25.334790Z","iopub.status.idle":"2025-04-29T16:11:25.339171Z","shell.execute_reply.started":"2025-04-29T16:11:25.334771Z","shell.execute_reply":"2025-04-29T16:11:25.338522Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"def evaluate(model, loader, task, device):\n    model.eval()\n    true_labels, pred_labels = [], []\n\n    # Disable gradient computation\n    with torch.no_grad():\n        for x, y in loader:\n            x, y = x.to(device), y.to(device)\n            outputs = model(x)\n\n            # Convert output to prediction\n            if task == 'classification':\n                preds = torch.argmax(outputs, dim=1)  \n            else:\n                preds = outputs.squeeze()  \n\n            # Store true and predicted values\n            true_labels.extend(y.cpu().numpy())\n            pred_labels.extend(preds.cpu().numpy())\n\n    return np.array(true_labels), np.array(pred_labels)","metadata":{"_uuid":"89cf5663-bfd0-43bd-be4b-d5a95c57f641","_cell_guid":"133faaf8-7f87-4c4f-aebc-18f6d38dacfc","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-29T16:11:25.678354Z","iopub.execute_input":"2025-04-29T16:11:25.678608Z","iopub.status.idle":"2025-04-29T16:11:25.683510Z","shell.execute_reply.started":"2025-04-29T16:11:25.678589Z","shell.execute_reply":"2025-04-29T16:11:25.682713Z"}},"outputs":[],"execution_count":49},{"cell_type":"markdown","source":"# Data","metadata":{"_uuid":"d4187151-fd05-4a8b-8265-1647e521b255","_cell_guid":"8808862d-753c-41cb-aa0a-359571f292ab","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"Load some files for example","metadata":{}},{"cell_type":"code","source":"img3D = np.load('/kaggle/input/fcmaps-processed/002_S_4654.processed.npy')\n\nprint(img3D.shape)\nprint(img3D.dtype)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T16:29:13.853697Z","iopub.execute_input":"2025-04-29T16:29:13.854410Z","iopub.status.idle":"2025-04-29T16:29:13.861592Z","shell.execute_reply.started":"2025-04-29T16:29:13.854386Z","shell.execute_reply":"2025-04-29T16:29:13.860920Z"}},"outputs":[{"name":"stdout","text":"(91, 109, 91)\nfloat32\n","output_type":"stream"}],"execution_count":63},{"cell_type":"markdown","source":"## Pairwise classification","metadata":{"_uuid":"6c7f11c7-c528-472e-9e7c-d00ca475eb8d","_cell_guid":"6a0ddacb-91c6-44f4-ae01-73b43e8dc842","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"- ADNI + CBS = 116 \n- CBS + PSP = 105 \n- ADNI + PSP = 133","metadata":{"_uuid":"2d8257b3-2005-4ab1-8321-72d015d4d0cc","_cell_guid":"a82f60a2-127c-4a93-ba39-a285387e6f4c","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"group1 = 'ADNI'\ngroup2 = 'PSP'\n\ndf_pair = df_labels[df_labels['Group'].isin([group1, group2])].reset_index(drop=True)","metadata":{"_uuid":"7f4869e1-ab5c-4c77-96e9-1aed8b9f8bd1","_cell_guid":"1d55a9b1-6f01-4b5e-8326-e362e31217eb","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:11:28.603258Z","iopub.execute_input":"2025-04-29T16:11:28.603537Z","iopub.status.idle":"2025-04-29T16:11:28.608691Z","shell.execute_reply.started":"2025-04-29T16:11:28.603515Z","shell.execute_reply":"2025-04-29T16:11:28.608154Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"df_pair.shape","metadata":{"_uuid":"9d565017-2411-497f-b6e9-4159ae954231","_cell_guid":"e147f4fb-cd28-4036-ae96-b16fa6ce6dd2","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:11:28.763007Z","iopub.execute_input":"2025-04-29T16:11:28.763381Z","iopub.status.idle":"2025-04-29T16:11:28.767659Z","shell.execute_reply.started":"2025-04-29T16:11:28.763362Z","shell.execute_reply":"2025-04-29T16:11:28.766922Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"(129, 5)"},"metadata":{}}],"execution_count":52},{"cell_type":"markdown","source":"## Splitting","metadata":{"_uuid":"f1a944c0-67c7-499f-a639-12d1dec67f10","_cell_guid":"ae16f5d0-f11e-4e5a-85d5-ea298028cbc2","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"train_df, test_df = train_test_split(\n    df_pair,\n    test_size=0.2,\n    stratify=df_pair['Group'],\n    random_state=42\n)","metadata":{"_uuid":"51f09362-8b59-4e31-9e74-664b02927f40","_cell_guid":"f60fabd9-dc00-44d3-87c9-5ea9f17084de","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-29T16:11:29.533713Z","iopub.execute_input":"2025-04-29T16:11:29.534395Z","iopub.status.idle":"2025-04-29T16:11:29.540265Z","shell.execute_reply.started":"2025-04-29T16:11:29.534369Z","shell.execute_reply":"2025-04-29T16:11:29.539739Z"}},"outputs":[],"execution_count":53},{"cell_type":"markdown","source":"Check the balance between groups","metadata":{"_uuid":"c160bc44-f88f-45f4-92e9-b9b70d9717b6","_cell_guid":"71dd530e-22ad-4d82-a896-71a692f18c23","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"print(train_df['Group'].value_counts())\nprint(test_df['Group'].value_counts())","metadata":{"_uuid":"f89e9d3b-f091-4505-9f6c-fb621e216ced","_cell_guid":"80bc41a6-298e-48ad-b6b1-fbb3e4fee40d","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:11:30.011343Z","iopub.execute_input":"2025-04-29T16:11:30.011602Z","iopub.status.idle":"2025-04-29T16:11:30.017408Z","shell.execute_reply.started":"2025-04-29T16:11:30.011583Z","shell.execute_reply":"2025-04-29T16:11:30.016607Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"Group\nADNI    57\nPSP     46\nName: count, dtype: int64\nGroup\nADNI    15\nPSP     11\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":54},{"cell_type":"markdown","source":"Example of augmentation","metadata":{"_uuid":"4b68e130-62c3-4ef1-91b3-dde1918b0154","_cell_guid":"4e508c43-8eb3-4e73-8e1f-a231faac159b","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"train_dataset = AugmentedFCDataset(path_fcmaps_augmented, train_df, label_column, task)","metadata":{"_uuid":"068db6d7-7a02-4089-ac15-4f430a1dd750","_cell_guid":"cb4b08a8-c853-47ec-a2a1-744e62af3792","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:11:30.393545Z","iopub.execute_input":"2025-04-29T16:11:30.393806Z","iopub.status.idle":"2025-04-29T16:11:30.529926Z","shell.execute_reply.started":"2025-04-29T16:11:30.393787Z","shell.execute_reply":"2025-04-29T16:11:30.529261Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"print(\"Shape before augmentation: \", train_df.shape )\nprint(\"Shape after augmentation: \", len(train_dataset) )","metadata":{"_uuid":"a3842f22-8cf2-4a86-9f15-3db4acff2930","_cell_guid":"cc67c580-cd9c-41df-b5bc-d02347568452","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:11:30.563137Z","iopub.execute_input":"2025-04-29T16:11:30.563812Z","iopub.status.idle":"2025-04-29T16:11:30.567624Z","shell.execute_reply.started":"2025-04-29T16:11:30.563787Z","shell.execute_reply":"2025-04-29T16:11:30.566919Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"Shape before augmentation:  (103, 5)\nShape after augmentation:  1030\n","output_type":"stream"}],"execution_count":56},{"cell_type":"markdown","source":"# Training","metadata":{"_uuid":"31db6d24-b93f-4d99-8c23-66af0b9c8a44","_cell_guid":"304a6113-0fdd-4931-b590-ce77c7b1846a","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# For k-fold cross-validation\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n# Subjects and correspondent labels \nsubjects = train_df['ID'].values\nlabels = train_df[label_column].values\nall_train_losses = []\nall_val_losses = []\n\n# Loop over the k-fold\nfor fold, (train_idx, val_idx) in enumerate(skf.split(subjects, labels), total=skf.get_n_splits()):\n    print(f\"\\n--- Fold {fold+1} ---\")\n    \n    # Subjects for the current fold\n    df_train_fold = train_df[train_df['ID'].isin(subjects[train_idx])]\n    df_val_fold   = train_df[train_df['ID'].isin(subjects[val_idx])]\n\n    # Create Datasets\n    train_dataset = AugmentedFCDataset(path_fcmaps_augmented, df_train_fold, label_column, task)\n    val_dataset = FCDataset(path_fcmaps, df_val_fold, label_column, task)\n\n    # Create DataLoaders\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n    \n    # Create the model and optimizer \n    model = SimpleCNN3D(n_classes=2).to(device)\n    optimizer = optim.Adam(model.parameters(), lr=lr)\n\n    # Variables\n    best_loss = float('inf')\n    train_losses, val_losses = [], []\n    \n   # Loop over epochs\n    for epoch in range(epochs):        \n        train_loss = train(train_loader, model, criterion, optimizer, device)\n        val_loss, val_accuracy = validate(val_loader, model, criterion, device)\n\n        print(f\"Epoch {epoch+1}/{epochs} | Train Loss: {train_loss:.4f} | Val Loss: {val_loss:.4f} | Val Accuracy: {val_accuracy:.4f}\")\n\n        train_losses.append(train_loss)\n        val_losses.append(val_loss)\n\n        # Save best model based on validation accuracy\n        best_model_path = f\"best_model_fold{fold}.pt\"\n        if val_accuracy > best_accuracy:\n            best_accuracy = val_accuracy\n            torch.save(model.state_dict(), best_model_path)\n\n    # Save for plotting\n    all_train_losses.append(train_losses)\n    all_val_losses.append(val_losses)\n","metadata":{"_uuid":"a62fadc7-243d-47f0-accb-265e52c337bb","_cell_guid":"bcb8b543-e0ad-4b02-90eb-c94f4d5eaba4","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:11:31.870478Z","iopub.execute_input":"2025-04-29T16:11:31.871170Z","iopub.status.idle":"2025-04-29T16:25:02.376441Z","shell.execute_reply.started":"2025-04-29T16:11:31.871145Z","shell.execute_reply":"2025-04-29T16:25:02.375569Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stderr","text":"Cross-validation folds:   0%|          | 0/5 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\n--- Fold 1 ---\nEpoch 1/10 | Train Loss: 0.6952 | Val Loss: 0.6803\nEpoch 2/10 | Train Loss: 0.6895 | Val Loss: 0.6819\nEpoch 3/10 | Train Loss: 0.6902 | Val Loss: 0.6843\nEpoch 4/10 | Train Loss: 0.6902 | Val Loss: 0.6811\nEpoch 5/10 | Train Loss: 0.6915 | Val Loss: 0.6799\nEpoch 6/10 | Train Loss: 0.6970 | Val Loss: 0.6818\nEpoch 7/10 | Train Loss: 0.6878 | Val Loss: 0.6761\nEpoch 8/10 | Train Loss: 0.6907 | Val Loss: 0.6797\nEpoch 9/10 | Train Loss: 0.6916 | Val Loss: 0.6774\n","output_type":"stream"},{"name":"stderr","text":"Cross-validation folds:  20%|██        | 1/5 [02:40<10:41, 160.30s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 10/10 | Train Loss: 0.6904 | Val Loss: 0.6799\n\n--- Fold 2 ---\nEpoch 1/10 | Train Loss: 0.7050 | Val Loss: 0.6836\nEpoch 2/10 | Train Loss: 0.6973 | Val Loss: 0.6816\nEpoch 3/10 | Train Loss: 0.6923 | Val Loss: 0.6773\nEpoch 4/10 | Train Loss: 0.6886 | Val Loss: 0.6737\nEpoch 5/10 | Train Loss: 0.6950 | Val Loss: 0.6845\nEpoch 6/10 | Train Loss: 0.6899 | Val Loss: 0.6865\nEpoch 7/10 | Train Loss: 0.6913 | Val Loss: 0.6816\nEpoch 8/10 | Train Loss: 0.6934 | Val Loss: 0.6794\nEpoch 9/10 | Train Loss: 0.6863 | Val Loss: 0.6787\n","output_type":"stream"},{"name":"stderr","text":"Cross-validation folds:  40%|████      | 2/5 [05:24<08:08, 162.89s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 10/10 | Train Loss: 0.6929 | Val Loss: 0.6780\n\n--- Fold 3 ---\nEpoch 1/10 | Train Loss: 0.6985 | Val Loss: 0.7226\nEpoch 2/10 | Train Loss: 0.6876 | Val Loss: 0.7094\nEpoch 3/10 | Train Loss: 0.6882 | Val Loss: 0.6978\nEpoch 4/10 | Train Loss: 0.6930 | Val Loss: 0.6919\nEpoch 5/10 | Train Loss: 0.6902 | Val Loss: 0.6939\nEpoch 6/10 | Train Loss: 0.6857 | Val Loss: 0.6842\nEpoch 7/10 | Train Loss: 0.6837 | Val Loss: 0.6692\nEpoch 8/10 | Train Loss: 0.6849 | Val Loss: 0.6700\nEpoch 9/10 | Train Loss: 0.6814 | Val Loss: 0.7119\n","output_type":"stream"},{"name":"stderr","text":"Cross-validation folds:  60%|██████    | 3/5 [08:05<05:23, 161.73s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 10/10 | Train Loss: 0.6804 | Val Loss: 0.6449\n\n--- Fold 4 ---\nEpoch 1/10 | Train Loss: 0.6880 | Val Loss: 0.7679\nEpoch 2/10 | Train Loss: 0.6874 | Val Loss: 0.7743\nEpoch 3/10 | Train Loss: 0.6836 | Val Loss: 0.7107\nEpoch 4/10 | Train Loss: 0.6832 | Val Loss: 0.7110\nEpoch 5/10 | Train Loss: 0.6726 | Val Loss: 0.7567\nEpoch 6/10 | Train Loss: 0.6658 | Val Loss: 1.2476\nEpoch 7/10 | Train Loss: 0.6695 | Val Loss: 0.7275\nEpoch 8/10 | Train Loss: 0.6785 | Val Loss: 0.7972\nEpoch 9/10 | Train Loss: 0.6555 | Val Loss: 0.7415\n","output_type":"stream"},{"name":"stderr","text":"Cross-validation folds:  80%|████████  | 4/5 [10:47<02:41, 161.90s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 10/10 | Train Loss: 0.6725 | Val Loss: 0.8631\n\n--- Fold 5 ---\nEpoch 1/10 | Train Loss: 0.6990 | Val Loss: 0.6722\nEpoch 2/10 | Train Loss: 0.7005 | Val Loss: 0.6893\nEpoch 3/10 | Train Loss: 0.6963 | Val Loss: 0.6891\nEpoch 4/10 | Train Loss: 0.6940 | Val Loss: 0.7019\nEpoch 5/10 | Train Loss: 0.6904 | Val Loss: 0.6849\nEpoch 6/10 | Train Loss: 0.6893 | Val Loss: 0.6881\nEpoch 7/10 | Train Loss: 0.6874 | Val Loss: 0.6863\nEpoch 8/10 | Train Loss: 0.6930 | Val Loss: 0.6755\nEpoch 9/10 | Train Loss: 0.6932 | Val Loss: 0.7005\n","output_type":"stream"},{"name":"stderr","text":"Cross-validation folds: 100%|██████████| 5/5 [13:30<00:00, 162.10s/it]","output_type":"stream"},{"name":"stdout","text":"Epoch 10/10 | Train Loss: 0.6816 | Val Loss: 0.7286\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}],"execution_count":57},{"cell_type":"code","source":"def plot_all_folds(all_train_losses, all_val_losses):\n    n_folds = len(all_train_losses)\n    cols = 2\n    rows = (n_folds + 1) // cols\n\n    fig, axes = plt.subplots(rows, cols, figsize=(12, 4 * rows))\n    axes = axes.flatten()\n\n    for i in range(n_folds):\n        ax = axes[i]\n        ax.plot(all_train_losses[i], label='Train Loss')\n        ax.plot(all_val_losses[i], label='Validation Loss')\n        ax.set_title(f'Fold {i+1}')\n        ax.set_xlabel('Epoch')\n        ax.set_ylabel('Loss')\n        ax.grid(True)\n        ax.legend()\n\n    # Rimuovi eventuali subplot vuoti se n_folds è dispari\n    for j in range(i + 1, len(axes)):\n        fig.delaxes(axes[j])\n\n    plt.tight_layout()\n    plt.suptitle('Training and Validation Loss per Fold', fontsize=16, y=1.02)\n    plt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_all_folds(all_train_losses, all_val_losses)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Evaluation","metadata":{"_uuid":"d7f2ace1-4ee9-4677-8a89-5abeffb933b1","_cell_guid":"e9b61d11-20a0-4d26-93b5-c65c90ebbcc4","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"best_model_path","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_dataset = FCDataset(\n    data_dir=path_fcmaps,\n    df_labels=test_df,\n    label_column=label_column,\n    task=task\n)\n\ntest_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)","metadata":{"_uuid":"c63f7b81-778c-48c7-919d-4dc484bee074","_cell_guid":"e1ed618e-8c70-4c51-ba85-db9d72e1c5a3","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-29T16:27:51.853773Z","iopub.execute_input":"2025-04-29T16:27:51.854639Z","iopub.status.idle":"2025-04-29T16:27:51.949390Z","shell.execute_reply.started":"2025-04-29T16:27:51.854613Z","shell.execute_reply":"2025-04-29T16:27:51.948852Z"}},"outputs":[],"execution_count":58},{"cell_type":"code","source":"# Load the model\nmodel = SimpleCNN3D(n_classes=n_classes).to(device)\nmodel.load_state_dict(torch.load(best_model_path, weights_only=True))\nmodel.eval()\n\n# Test\ny_true, y_pred = evaluate(model, test_loader, task, device)","metadata":{"_uuid":"0e539590-ea36-40b3-a9b7-c2c081d35dd4","_cell_guid":"7431f068-1a13-450b-b7d1-e246a5675184","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-29T16:32:44.924696Z","iopub.execute_input":"2025-04-29T16:32:44.924991Z","iopub.status.idle":"2025-04-29T16:32:45.155937Z","shell.execute_reply.started":"2025-04-29T16:32:44.924971Z","shell.execute_reply":"2025-04-29T16:32:45.155343Z"}},"outputs":[],"execution_count":74},{"cell_type":"markdown","source":"## Classification","metadata":{"_uuid":"26641b05-9b58-4ab9-85ed-31ce29489bd1","_cell_guid":"c4f90940-2592-4cd2-80bf-409de2052a26","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Metrics\nreport = classification_report(\n    y_true, y_pred,\n    output_dict=True,\n    zero_division=0  \n)\n\ndf_report = pd.DataFrame(report).transpose()","metadata":{"_uuid":"f93c8b70-0f9f-4af3-b6af-f6762547d7f2","_cell_guid":"eedcb82a-aa1a-4d5c-a740-9d13bc152100","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-29T16:32:47.086239Z","iopub.execute_input":"2025-04-29T16:32:47.086490Z","iopub.status.idle":"2025-04-29T16:32:47.097496Z","shell.execute_reply.started":"2025-04-29T16:32:47.086471Z","shell.execute_reply":"2025-04-29T16:32:47.096868Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":75},{"cell_type":"code","source":"df_report.round(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-29T16:32:58.564436Z","iopub.execute_input":"2025-04-29T16:32:58.565092Z","iopub.status.idle":"2025-04-29T16:32:58.573360Z","shell.execute_reply.started":"2025-04-29T16:32:58.565069Z","shell.execute_reply":"2025-04-29T16:32:58.572681Z"}},"outputs":[{"execution_count":77,"output_type":"execute_result","data":{"text/plain":"              precision  recall  f1-score  support\n0                 0.577   1.000     0.732   15.000\n1                 0.000   0.000     0.000   11.000\naccuracy          0.577   0.577     0.577    0.577\nmacro avg         0.288   0.500     0.366   26.000\nweighted avg      0.333   0.577     0.422   26.000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>f1-score</th>\n      <th>support</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.577</td>\n      <td>1.000</td>\n      <td>0.732</td>\n      <td>15.000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>11.000</td>\n    </tr>\n    <tr>\n      <th>accuracy</th>\n      <td>0.577</td>\n      <td>0.577</td>\n      <td>0.577</td>\n      <td>0.577</td>\n    </tr>\n    <tr>\n      <th>macro avg</th>\n      <td>0.288</td>\n      <td>0.500</td>\n      <td>0.366</td>\n      <td>26.000</td>\n    </tr>\n    <tr>\n      <th>weighted avg</th>\n      <td>0.333</td>\n      <td>0.577</td>\n      <td>0.422</td>\n      <td>26.000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":77},{"cell_type":"code","source":"# Confusion matrix\nconf_matrix = confusion_matrix(y_true, y_pred)\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\nplt.title(\"Test Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"True\")\nplt.show()","metadata":{"_uuid":"35cbcb49-9910-461b-afc1-49511397e5b9","_cell_guid":"eff4fbf3-1db7-4cd8-908e-31e97e50dc97","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-04-29T16:30:51.943516Z","iopub.execute_input":"2025-04-29T16:30:51.943775Z","iopub.status.idle":"2025-04-29T16:30:52.154743Z","shell.execute_reply.started":"2025-04-29T16:30:51.943754Z","shell.execute_reply":"2025-04-29T16:30:52.154104Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":71},{"cell_type":"markdown","source":"#### TODO:\n- Multiclass Precision-Recall Curve\n- Plotting the Multiclass ROC Curve","metadata":{"_uuid":"4c71c99c-a2b3-47d8-8172-fe2e3af4bde8","_cell_guid":"9d014526-4116-408a-823d-1f63d53a83ad","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-04-15T14:07:21.712122Z","iopub.execute_input":"2025-04-15T14:07:21.712736Z","iopub.status.idle":"2025-04-15T14:07:21.715934Z","shell.execute_reply.started":"2025-04-15T14:07:21.712709Z","shell.execute_reply":"2025-04-15T14:07:21.715077Z"},"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"## Regression","metadata":{"_uuid":"92dc2123-3810-4f6a-aa6f-694781205c00","_cell_guid":"560e7223-92a0-4eb5-8878-26e9a2d37f93","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"y_true = np.array(true_labels)\ny_pred = np.array(pred_labels)\nresiduals = y_true - y_pred\n\nmse = mean_squared_error(y_true, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_true, y_pred)\nr2 = r2_score(y_true, y_pred)\ntry:\n    msle = mean_squared_log_error(y_true, y_pred)\nexcept ValueError:\n    msle = np.nan\n\nprint(\"\\nTest Regression Metrics:\")\nmetrics = {\n    \"MSE\": mse,\n    \"RMSE\": rmse,\n    \"MAE\": mae,\n    \"R2 Score\": r2,\n    \"MSLE\": msle\n}\ndf_metrics = pd.DataFrame(metrics, index=[\"Value\"]).T.round(4)\ndisplay(df_metrics)\n\n# Scatter plot: Predicted vs Actual\nplt.scatter(y_true, y_pred, alpha=0.6)\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predicted Values\")\nplt.title(\"Actual vs Predicted\")\nplt.grid(True)\nplt.show()\n\n# Histogram of residuals\nplt.hist(residuals, bins=30, edgecolor='black')\nplt.title(\"Histogram of Residuals\")\nplt.xlabel(\"Residual\")\nplt.ylabel(\"Frequency\")\nplt.grid(True)\nplt.show()\n\n# Residuals vs Fitted\nplt.scatter(y_pred, residuals, alpha=0.6)\nplt.axhline(0, color='red', linestyle='--')\nplt.xlabel(\"Fitted Values\")\nplt.ylabel(\"Residuals\")\nplt.title(\"Residuals vs Fitted Values\")\nplt.grid(True)\nplt.show()\n\n# Normality Q-Q Plot\nimport scipy.stats as stats\nstats.probplot(residuals, dist=\"norm\", plot=plt)\nplt.title(\"Normal Q-Q Plot\")\nplt.grid(True)\nplt.show()","metadata":{"_uuid":"ca86cc7b-f803-4808-9728-546e3a044870","_cell_guid":"a12d4d24-cbc3-418f-82c6-c062aa16c775","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}